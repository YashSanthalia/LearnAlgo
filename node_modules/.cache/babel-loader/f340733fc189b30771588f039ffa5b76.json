{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yash santhalia\\\\Desktop\\\\React\\\\algo\\\\src\\\\AStar\\\\AStar.js\";\nimport React from \"react\";\nimport Sketch from \"react-p5\";\nimport Cell from \"./Cell\";\nimport NavBar from \"./components/NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet cols, rows;\nconst side = 20;\nlet grid = new Array(cols);\nlet openSet = [];\nlet closedSet = [];\nlet start = null,\n    end = null,\n    current = null;\nlet noSolution = false,\n    solution = false;\nlet path = [];\nlet reLoad = false;\n\nclass AStar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      start: null,\n      end: null,\n      stage: 0\n    };\n\n    this.componentDidUpdate = () => {\n      console.log(3);\n      console.log(reLoad);\n\n      if (reLoad) {\n        for (let i = 0; i < cols; i++) {\n          grid[i] = new Array(rows);\n        }\n\n        for (let i = 0; i < cols; i++) {\n          for (let j = 0; j < rows; j++) {\n            grid[i][j] = new Cell(i, j, rows, cols);\n            grid[i][j].addNeighbours();\n          }\n        }\n\n        reLoad = false;\n        noSolution = false;\n        solution = false;\n      }\n\n      start = this.state.start;\n      end = this.state.end;\n      if (start) openSet.push(start);\n      console.log(4);\n    };\n\n    this.componentDidMount = () => {\n      for (let i = 0; i < cols; i++) {\n        grid[i] = new Array(rows);\n      }\n\n      for (let i = 0; i < cols; i++) {\n        for (let j = 0; j < rows; j++) {\n          grid[i][j] = new Cell(i, j, rows, cols);\n          grid[i][j].addNeighbours();\n        }\n      }\n\n      start = this.state.start;\n      end = this.state.end;\n      if (start) openSet.push(start);\n    };\n\n    this.setup = (p5, parent) => {\n      let xyz = p5.createCanvas(1200, 500).parent(parent);\n      let x = (p5.windowWidth - p5.width) / 2;\n      let y = (p5.windowHeight - p5.height) / 2;\n      xyz.position(x, y); // p5.frameRate(5);\n\n      cols = p5.width / side;\n      rows = p5.height / side;\n    };\n\n    this.draw = p5 => {\n      console.log(1);\n\n      if (!noSolution && !solution) {\n        p5.background(0);\n\n        if (start && end) {\n          if (openSet.length > 0) {\n            let lowestIndex = 0;\n\n            for (let i = 0; i < openSet.length; i++) {\n              if (openSet[i].f < openSet[lowestIndex].f) lowestIndex = i;\n            }\n\n            current = openSet[lowestIndex];\n\n            if (current === end) {\n              solution = true; // p5.noLoop();\n            }\n\n            this.removeFromArray(openSet, current);\n            closedSet.push(current);\n            let neighbours = current.neighbours;\n\n            for (let i = 0; i < neighbours.length; i++) {\n              let [x, y] = neighbours[i];\n              let neighbour = grid[x][y];\n\n              if (!closedSet.includes(neighbour) && !neighbour.wall) {\n                let tempG = current.g + 1;\n\n                if (openSet.includes(neighbour)) {\n                  if (tempG < neighbour.g) {\n                    neighbour.g = tempG;\n                    neighbour.prev = current;\n                    neighbour.h = this.heuristic(neighbour.i, neighbour.j);\n                    neighbour.f = neighbour.g + neighbour.h;\n                  }\n                } else {\n                  neighbour.g = tempG;\n                  openSet.push(neighbour);\n                  neighbour.prev = current;\n                  neighbour.h = this.heuristic(neighbour.i, neighbour.j);\n                  neighbour.f = neighbour.g + neighbour.h;\n                }\n              }\n            }\n          } else {\n            noSolution = true; // p5.noLoop();\n          }\n        }\n\n        for (let i = 0; i < cols; i++) {\n          for (let j = 0; j < rows; j++) {\n            let x = i * side;\n            let y = j * side;\n            p5.fill(255);\n            p5.stroke(0);\n\n            if (grid[i][j].wall) {\n              p5.fill(0);\n              p5.stroke(0);\n            }\n\n            if (grid[i][j] === start) {\n              p5.fill(233, 222, 21);\n            }\n\n            if (grid[i][j] === end) {\n              p5.fill(228, 31, 4);\n            }\n\n            p5.rect(x, y, side, side);\n          }\n        }\n\n        for (let i = 0; i < openSet.length; i++) {\n          let x = openSet[i].i;\n          let y = openSet[i].j;\n          x = x * side;\n          y = y * side;\n          p5.fill(139, 237, 151);\n          p5.stroke(0);\n\n          if (openSet[i] === start) {\n            p5.fill(233, 222, 21);\n          }\n\n          if (openSet[i] === end) {\n            p5.fill(228, 31, 4);\n          }\n\n          p5.rect(x, y, side, side);\n        }\n\n        for (let i = 0; i < closedSet.length; i++) {\n          let x = closedSet[i].i;\n          let y = closedSet[i].j;\n          x = x * side;\n          y = y * side;\n          p5.fill(4, 228, 226);\n          p5.stroke(0);\n\n          if (closedSet[i] === start) {\n            p5.fill(233, 222, 21);\n          } else if (closedSet[i] === end) {\n            p5.fill(228, 31, 4);\n          }\n\n          p5.rect(x, y, side, side);\n        }\n\n        if (!noSolution && current) {\n          path = [];\n          path.push(current);\n\n          while (current.prev) {\n            path.push(current.prev);\n            current = current.prev;\n          }\n        }\n\n        for (let i = 0; i < path.length; i++) {\n          let x = path[i].i;\n          let y = path[i].j;\n          x = x * side;\n          y = y * side;\n          p5.fill(0, 0, 255);\n          p5.stroke(0);\n\n          if (path[i] === start) {\n            p5.fill(233, 222, 21);\n          } else if (path[i] === end) {\n            p5.fill(228, 31, 4);\n          }\n\n          p5.rect(x, y, side, side);\n        }\n      }\n    };\n\n    this.mousePressed = e => {\n      let x = e.mouseX;\n      let y = e.mouseY;\n      let i = Math.floor(x / side);\n      let j = Math.floor(y / side);\n\n      if (i >= 0 && j >= 0 && i < cols && j < rows && !grid[i][j].wall) {\n        if (!this.state.start) this.setState({\n          start: grid[i][j],\n          stage: 1\n        });else if (!this.state.end) this.setState({\n          end: grid[i][j],\n          stage: 2\n        });\n      }\n    };\n\n    this.onBackButtonClick = () => {\n      // openSet = [];\n      // closedSet = [];\n      // noSolution = false;\n      // path = [];\n      // current = null;\n      reLoad = false; // noSolution = false;\n      // solution = false;\n\n      this.props.onBackButtonClick();\n    };\n\n    this.onClearButtonClick = () => {\n      // openSet = [];\n      // closedSet = [];\n      // noSolution = false;\n      // path = [];\n      // current = null;\n      reLoad = true; // noSolution = false;\n      // solution = false;\n\n      this.setState({\n        start: null,\n        end: null,\n        stage: 0\n      });\n    };\n  }\n\n  removeFromArray(array, element) {\n    for (let i = array.length - 1; i >= 0; i--) {\n      if (array[i] === element) array.splice(i, 1);\n    }\n  }\n\n  heuristic(i, j) {\n    let x = this.state.end.i - i;\n    let y = this.state.end.j - j;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        stage: this.state.stage,\n        algo: \"A*\",\n        onBackButtonClick: this.onBackButtonClick,\n        onClearButtonClick: this.onClearButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sketch, {\n        setup: this.setup,\n        draw: this.draw,\n        mousePressed: this.mousePressed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default AStar;","map":{"version":3,"sources":["C:/Users/yash santhalia/Desktop/React/algo/src/AStar/AStar.js"],"names":["React","Sketch","Cell","NavBar","cols","rows","side","grid","Array","openSet","closedSet","start","end","current","noSolution","solution","path","reLoad","AStar","Component","state","stage","componentDidUpdate","console","log","i","j","addNeighbours","push","componentDidMount","setup","p5","parent","xyz","createCanvas","x","windowWidth","width","y","windowHeight","height","position","draw","background","length","lowestIndex","f","removeFromArray","neighbours","neighbour","includes","wall","tempG","g","prev","h","heuristic","fill","stroke","rect","mousePressed","e","mouseX","mouseY","Math","floor","setState","onBackButtonClick","props","onClearButtonClick","array","element","splice","sqrt","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport Cell from \"./Cell\";\r\nimport NavBar from \"./components/NavBar\";\r\n\r\nlet cols, rows;\r\nconst side = 20;\r\nlet grid = new Array(cols);\r\nlet openSet = [];\r\nlet closedSet = [];\r\nlet start = null,\r\n  end = null,\r\n  current = null;\r\nlet noSolution = false,\r\n  solution = false;\r\nlet path = [];\r\nlet reLoad = false;\r\n\r\nclass AStar extends React.Component {\r\n  state = { start: null, end: null, stage: 0 };\r\n\r\n  componentDidUpdate = () => {\r\n    console.log(3);\r\n    console.log(reLoad);\r\n    if (reLoad) {\r\n      for (let i = 0; i < cols; i++) {\r\n        grid[i] = new Array(rows);\r\n      }\r\n\r\n      for (let i = 0; i < cols; i++) {\r\n        for (let j = 0; j < rows; j++) {\r\n          grid[i][j] = new Cell(i, j, rows, cols);\r\n          grid[i][j].addNeighbours();\r\n        }\r\n      }\r\n      reLoad = false;\r\n      noSolution = false;\r\n      solution = false;\r\n    }\r\n    start = this.state.start;\r\n    end = this.state.end;\r\n    if (start) openSet.push(start);\r\n    console.log(4);\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    for (let i = 0; i < cols; i++) {\r\n      grid[i] = new Array(rows);\r\n    }\r\n\r\n    for (let i = 0; i < cols; i++) {\r\n      for (let j = 0; j < rows; j++) {\r\n        grid[i][j] = new Cell(i, j, rows, cols);\r\n        grid[i][j].addNeighbours();\r\n      }\r\n    }\r\n    start = this.state.start;\r\n    end = this.state.end;\r\n    if (start) openSet.push(start);\r\n  };\r\n\r\n  setup = (p5, parent) => {\r\n    let xyz = p5.createCanvas(1200, 500).parent(parent);\r\n    let x = (p5.windowWidth - p5.width) / 2;\r\n    let y = (p5.windowHeight - p5.height) / 2;\r\n    xyz.position(x, y);\r\n    // p5.frameRate(5);\r\n    cols = p5.width / side;\r\n    rows = p5.height / side;\r\n  };\r\n\r\n  draw = (p5) => {\r\n    console.log(1);\r\n    if (!noSolution && !solution) {\r\n      p5.background(0);\r\n      if (start && end) {\r\n        if (openSet.length > 0) {\r\n          let lowestIndex = 0;\r\n          for (let i = 0; i < openSet.length; i++) {\r\n            if (openSet[i].f < openSet[lowestIndex].f) lowestIndex = i;\r\n          }\r\n          current = openSet[lowestIndex];\r\n          if (current === end) {\r\n            solution = true;\r\n            // p5.noLoop();\r\n          }\r\n          this.removeFromArray(openSet, current);\r\n          closedSet.push(current);\r\n\r\n          let neighbours = current.neighbours;\r\n          for (let i = 0; i < neighbours.length; i++) {\r\n            let [x, y] = neighbours[i];\r\n            let neighbour = grid[x][y];\r\n            if (!closedSet.includes(neighbour) && !neighbour.wall) {\r\n              let tempG = current.g + 1;\r\n              if (openSet.includes(neighbour)) {\r\n                if (tempG < neighbour.g) {\r\n                  neighbour.g = tempG;\r\n                  neighbour.prev = current;\r\n                  neighbour.h = this.heuristic(neighbour.i, neighbour.j);\r\n                  neighbour.f = neighbour.g + neighbour.h;\r\n                }\r\n              } else {\r\n                neighbour.g = tempG;\r\n                openSet.push(neighbour);\r\n                neighbour.prev = current;\r\n                neighbour.h = this.heuristic(neighbour.i, neighbour.j);\r\n                neighbour.f = neighbour.g + neighbour.h;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          noSolution = true;\r\n          // p5.noLoop();\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < cols; i++) {\r\n        for (let j = 0; j < rows; j++) {\r\n          let x = i * side;\r\n          let y = j * side;\r\n          p5.fill(255);\r\n          p5.stroke(0);\r\n          if (grid[i][j].wall) {\r\n            p5.fill(0);\r\n            p5.stroke(0);\r\n          }\r\n          if (grid[i][j] === start) {\r\n            p5.fill(233, 222, 21);\r\n          }\r\n          if (grid[i][j] === end) {\r\n            p5.fill(228, 31, 4);\r\n          }\r\n          p5.rect(x, y, side, side);\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < openSet.length; i++) {\r\n        let x = openSet[i].i;\r\n        let y = openSet[i].j;\r\n        x = x * side;\r\n        y = y * side;\r\n        p5.fill(139, 237, 151);\r\n        p5.stroke(0);\r\n        if (openSet[i] === start) {\r\n          p5.fill(233, 222, 21);\r\n        }\r\n        if (openSet[i] === end) {\r\n          p5.fill(228, 31, 4);\r\n        }\r\n        p5.rect(x, y, side, side);\r\n      }\r\n\r\n      for (let i = 0; i < closedSet.length; i++) {\r\n        let x = closedSet[i].i;\r\n        let y = closedSet[i].j;\r\n        x = x * side;\r\n        y = y * side;\r\n        p5.fill(4, 228, 226);\r\n        p5.stroke(0);\r\n        if (closedSet[i] === start) {\r\n          p5.fill(233, 222, 21);\r\n        } else if (closedSet[i] === end) {\r\n          p5.fill(228, 31, 4);\r\n        }\r\n        p5.rect(x, y, side, side);\r\n      }\r\n\r\n      if (!noSolution && current) {\r\n        path = [];\r\n        path.push(current);\r\n        while (current.prev) {\r\n          path.push(current.prev);\r\n          current = current.prev;\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < path.length; i++) {\r\n        let x = path[i].i;\r\n        let y = path[i].j;\r\n        x = x * side;\r\n        y = y * side;\r\n        p5.fill(0, 0, 255);\r\n        p5.stroke(0);\r\n        if (path[i] === start) {\r\n          p5.fill(233, 222, 21);\r\n        } else if (path[i] === end) {\r\n          p5.fill(228, 31, 4);\r\n        }\r\n        p5.rect(x, y, side, side);\r\n      }\r\n    }\r\n  };\r\n\r\n  mousePressed = (e) => {\r\n    let x = e.mouseX;\r\n    let y = e.mouseY;\r\n    let i = Math.floor(x / side);\r\n    let j = Math.floor(y / side);\r\n    if (i >= 0 && j >= 0 && i < cols && j < rows && !grid[i][j].wall) {\r\n      if (!this.state.start) this.setState({ start: grid[i][j], stage: 1 });\r\n      else if (!this.state.end) this.setState({ end: grid[i][j], stage: 2 });\r\n    }\r\n  };\r\n\r\n  removeFromArray(array, element) {\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n      if (array[i] === element) array.splice(i, 1);\r\n    }\r\n  }\r\n\r\n  heuristic(i, j) {\r\n    let x = this.state.end.i - i;\r\n    let y = this.state.end.j - j;\r\n    return Math.sqrt(x * x + y * y);\r\n  }\r\n\r\n  onBackButtonClick = () => {\r\n    // openSet = [];\r\n    // closedSet = [];\r\n    // noSolution = false;\r\n    // path = [];\r\n    // current = null;\r\n    reLoad = false;\r\n    // noSolution = false;\r\n    // solution = false;\r\n    this.props.onBackButtonClick();\r\n  };\r\n\r\n  onClearButtonClick = () => {\r\n    // openSet = [];\r\n    // closedSet = [];\r\n    // noSolution = false;\r\n    // path = [];\r\n    // current = null;\r\n    reLoad = true;\r\n    // noSolution = false;\r\n    // solution = false;\r\n    this.setState({ start: null, end: null, stage: 0 });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar\r\n          stage={this.state.stage}\r\n          algo=\"A*\"\r\n          onBackButtonClick={this.onBackButtonClick}\r\n          onClearButtonClick={this.onClearButtonClick}\r\n        />\r\n        <Sketch\r\n          setup={this.setup}\r\n          draw={this.draw}\r\n          mousePressed={this.mousePressed}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AStar;\r\n"]},"metadata":{},"sourceType":"module"}