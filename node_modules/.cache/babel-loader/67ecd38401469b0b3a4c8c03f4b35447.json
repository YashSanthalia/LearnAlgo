{"ast":null,"code":"class Cell {\n  constructor(i, j, rows, cols) {\n    this.i = i;\n    this.j = j;\n    this.visited = false;\n    this.walls = [true, true, true, true];\n    this.rows = rows;\n    this.cols = cols;\n  } // checkNeighbours = () => {\n  //     const i = this.i;\n  //     const j = this.j;\n  //     let neighbours = [];\n  //     let top = grid[this.index(i, j - 1)];\n  //     let right = grid[this.index(i + 1, j)];\n  //     let bottom = grid[this.index(i, j + 1)];\n  //     let left = grid[this.index(i - 1, j)];\n  //     if (top && !top.visited) neighbours.push(top);\n  //     if (right && !right.visited) neighbours.push(right);\n  //     if (bottom && !bottom.visited) neighbours.push(bottom);\n  //     if (left && !left.visited) neighbours.push(left);\n  //     if (neighbours.length > 0) {\n  //       return neighbours[Math.floor(Math.random() * neighbours.length)];\n  //     } else return undefined;\n  //   };\n  //   index = (i, j) => {\n  //     if (i < 0 || j < 0 || i > cols - 1 || j > rows - 1) return -1;\n  //     return j * cols + i;\n  //   };\n\n\n}\n\nexport default Cell;","map":{"version":3,"sources":["C:/Users/yash santhalia/Desktop/React/algo/src/BackTracking/Cell.js"],"names":["Cell","constructor","i","j","rows","cols","visited","walls"],"mappings":"AAAA,MAAMA,IAAN,CAAU;AACNC,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,IAAP,EAAaC,IAAb,EAAkB;AACzB,SAAKH,CAAL,GAAOA,CAAP;AACA,SAAKC,CAAL,GAAOA,CAAP;AACA,SAAKG,OAAL,GAAe,KAAf;AACA,SAAKC,KAAL,GAAa,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAb;AACA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACH,GARK,CAUN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AA9BM;;AAkCV,eAAeL,IAAf","sourcesContent":["class Cell{\r\n    constructor(i, j, rows, cols){\r\n        this.i=i;\r\n        this.j=j;\r\n        this.visited = false;\r\n        this.walls = [true, true, true, true];\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n    }\r\n\r\n    // checkNeighbours = () => {\r\n    //     const i = this.i;\r\n    //     const j = this.j;\r\n    //     let neighbours = [];\r\n    //     let top = grid[this.index(i, j - 1)];\r\n    //     let right = grid[this.index(i + 1, j)];\r\n    //     let bottom = grid[this.index(i, j + 1)];\r\n    //     let left = grid[this.index(i - 1, j)];\r\n    //     if (top && !top.visited) neighbours.push(top);\r\n    //     if (right && !right.visited) neighbours.push(right);\r\n    //     if (bottom && !bottom.visited) neighbours.push(bottom);\r\n    //     if (left && !left.visited) neighbours.push(left);\r\n    //     if (neighbours.length > 0) {\r\n    //       return neighbours[Math.floor(Math.random() * neighbours.length)];\r\n    //     } else return undefined;\r\n    //   };\r\n\r\n    //   index = (i, j) => {\r\n    //     if (i < 0 || j < 0 || i > cols - 1 || j > rows - 1) return -1;\r\n    //     return j * cols + i;\r\n    //   };\r\n    \r\n}\r\n\r\nexport default Cell;"]},"metadata":{},"sourceType":"module"}