{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yash santhalia\\\\Desktop\\\\React\\\\algo\\\\src\\\\Dijkstra\\\\Dijkstra.js\";\nimport React from \"react\";\nimport Sketch from \"react-p5\";\nimport Cell from \"../AStar/Cell\";\nimport NavBar from \"../AStar/components/NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet cols, rows;\nconst side = 50;\nlet grid = new Array(cols);\nlet openSet = [];\nlet closedSet = [];\nlet start = null,\n    end = null,\n    current = null;\nlet noSolution = false,\n    solution = false;\nlet reLoad = false;\nlet path = [];\n\nclass Dijkstra extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      start: null,\n      end: null,\n      stage: 0\n    };\n\n    this.componentDidUpdate = () => {\n      if (reLoad) {\n        openSet = [];\n        closedSet = [];\n        noSolution = false;\n        path = [];\n        current = null;\n        reLoad = false;\n        noSolution = false;\n        solution = false;\n\n        for (let i = 0; i < cols; i++) {\n          grid[i] = new Array(rows);\n        }\n\n        for (let i = 0; i < cols; i++) {\n          for (let j = 0; j < rows; j++) {\n            grid[i][j] = new Cell(i, j, rows, cols);\n            grid[i][j].addNeighbours();\n          }\n        }\n      }\n\n      start = this.state.start;\n      end = this.state.end;\n      if (start) openSet.push(start);\n    };\n\n    this.componentDidMount = () => {\n      for (let i = 0; i < cols; i++) {\n        grid[i] = new Array(rows);\n      }\n\n      for (let i = 0; i < cols; i++) {\n        for (let j = 0; j < rows; j++) {\n          grid[i][j] = new Cell(i, j, rows, cols);\n          grid[i][j].addNeighbours();\n        }\n      }\n\n      start = this.state.start;\n      end = this.state.end;\n      if (start) openSet.push(start);\n    };\n\n    this.setup = (p5, parent) => {\n      let xyz = p5.createCanvas(1200, 500).parent(parent);\n      let x = (p5.windowWidth - p5.width) / 2;\n      let y = (p5.windowHeight - p5.height) / 2;\n      xyz.position(x, y);\n      cols = p5.width / side;\n      rows = p5.height / side; // p5.frameRate();\n    };\n\n    this.draw = p5 => {\n      console.log(p5.frameRate);\n\n      if (!noSolution && !solution) {\n        p5.background(0);\n\n        if (start && end) {\n          if (openSet.length > 0) {\n            let lowestIndex = 0;\n\n            for (let i = 0; i < openSet.length; i++) {\n              if (openSet[i].f < openSet[lowestIndex].f) lowestIndex = i;\n            }\n\n            current = openSet[lowestIndex];\n\n            if (current === end) {\n              solution = true;\n            }\n\n            this.removeFromArray(openSet, current);\n            closedSet.push(current);\n            let neighbours = current.neighbours;\n\n            for (let i = 0; i < neighbours.length; i++) {\n              let [x, y] = neighbours[i];\n              let neighbour = grid[x][y];\n\n              if (!closedSet.includes(neighbour) && !neighbour.wall) {\n                let tempG = current.g + 1;\n\n                if (openSet.includes(neighbour)) {\n                  if (tempG < neighbour.g) {\n                    neighbour.g = tempG;\n                    neighbour.prev = current;\n                    neighbour.f = neighbour.g + neighbour.h;\n                  }\n                } else {\n                  neighbour.g = tempG;\n                  openSet.push(neighbour);\n                  neighbour.prev = current;\n                  neighbour.f = neighbour.g + neighbour.h;\n                }\n              }\n            }\n          } else if (!solution) {\n            noSolution = true;\n          }\n        }\n\n        for (let i = 0; i < cols; i++) {\n          for (let j = 0; j < rows; j++) {\n            let x = i * side;\n            let y = j * side;\n            p5.fill(255);\n            p5.stroke(0);\n\n            if (grid[i][j].wall) {\n              p5.fill(0);\n              p5.stroke(0);\n            }\n\n            if (grid[i][j] === start) {\n              p5.fill(233, 222, 21);\n            }\n\n            if (grid[i][j] === end) {\n              p5.fill(228, 31, 4);\n            }\n\n            p5.rect(x, y, side, side);\n          }\n        }\n\n        for (let i = 0; i < openSet.length; i++) {\n          let x = openSet[i].i;\n          let y = openSet[i].j;\n          x = x * side;\n          y = y * side;\n          p5.fill(139, 237, 151);\n          p5.stroke(0);\n\n          if (openSet[i] === start) {\n            p5.fill(233, 222, 21);\n          }\n\n          if (openSet[i] === end) {\n            p5.fill(228, 31, 4);\n          }\n\n          p5.rect(x, y, side, side);\n        }\n\n        for (let i = 0; i < closedSet.length; i++) {\n          let x = closedSet[i].i;\n          let y = closedSet[i].j;\n          x = x * side;\n          y = y * side;\n          p5.fill(4, 228, 226);\n          p5.stroke(0);\n\n          if (closedSet[i] === start) {\n            p5.fill(233, 222, 21);\n          } else if (closedSet[i] === end) {\n            p5.fill(228, 31, 4);\n          }\n\n          p5.rect(x, y, side, side);\n        }\n\n        if (!noSolution && current) {\n          path = [];\n          path.push(current);\n\n          while (current.prev) {\n            path.push(current.prev);\n            current = current.prev;\n          }\n        }\n\n        for (let i = 0; i < path.length; i++) {\n          let x = path[i].i;\n          let y = path[i].j;\n          x = x * side;\n          y = y * side;\n          p5.fill(0, 0, 255);\n          p5.stroke(0);\n\n          if (path[i] === start) {\n            p5.fill(233, 222, 21);\n          } else if (path[i] === end) {\n            p5.fill(228, 31, 4);\n          }\n\n          p5.rect(x, y, side, side);\n        }\n      } else if (noSolution) {\n        console.log(\"NO solution\");\n      }\n    };\n\n    this.mousePressed = e => {\n      let x = e.mouseX;\n      let y = e.mouseY;\n      let i = Math.floor(x / side);\n      let j = Math.floor(y / side);\n\n      if (i >= 0 && j >= 0 && i < cols && j < rows && !grid[i][j].wall) {\n        if (!this.state.start) this.setState({\n          start: grid[i][j],\n          stage: 1\n        });else if (!this.state.end) this.setState({\n          end: grid[i][j],\n          stage: 2\n        });\n      }\n    };\n\n    this.onBackButtonClick = () => {\n      openSet = [];\n      closedSet = [];\n      noSolution = false;\n      path = [];\n      current = null;\n      reLoad = false;\n      noSolution = false;\n      solution = false;\n      this.props.onBackButtonClick();\n    };\n\n    this.onClearButtonClick = () => {\n      reLoad = true;\n      this.setState({\n        start: null,\n        end: null,\n        stage: 0\n      });\n    };\n  }\n\n  removeFromArray(array, element) {\n    for (let i = array.length - 1; i >= 0; i--) {\n      if (array[i] === element) array.splice(i, 1);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        stage: this.state.stage,\n        algo: \"Dijkstra\",\n        onBackButtonClick: this.onBackButtonClick,\n        onClearButtonClick: this.onClearButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sketch, {\n        setup: this.setup,\n        draw: this.draw,\n        mousePressed: this.mousePressed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Dijkstra;","map":{"version":3,"sources":["C:/Users/yash santhalia/Desktop/React/algo/src/Dijkstra/Dijkstra.js"],"names":["React","Sketch","Cell","NavBar","cols","rows","side","grid","Array","openSet","closedSet","start","end","current","noSolution","solution","reLoad","path","Dijkstra","Component","state","stage","componentDidUpdate","i","j","addNeighbours","push","componentDidMount","setup","p5","parent","xyz","createCanvas","x","windowWidth","width","y","windowHeight","height","position","draw","console","log","frameRate","background","length","lowestIndex","f","removeFromArray","neighbours","neighbour","includes","wall","tempG","g","prev","h","fill","stroke","rect","mousePressed","e","mouseX","mouseY","Math","floor","setState","onBackButtonClick","props","onClearButtonClick","array","element","splice","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport Cell from \"../AStar/Cell\";\r\nimport NavBar from \"../AStar/components/NavBar\";\r\n\r\nlet cols, rows;\r\nconst side = 50;\r\nlet grid = new Array(cols);\r\nlet openSet = [];\r\nlet closedSet = [];\r\nlet start = null,\r\n  end = null,\r\n  current = null;\r\nlet noSolution = false,solution = false;\r\nlet reLoad = false;\r\nlet path = [];\r\n\r\nclass Dijkstra extends React.Component {\r\n  \r\n  state = { start: null, end: null, stage: 0 };\r\n\r\n  componentDidUpdate = () => {\r\n    if (reLoad) {\r\n      openSet = [];\r\n      closedSet = [];\r\n      noSolution = false;\r\n      path = [];\r\n      current = null;\r\n      reLoad = false;\r\n      noSolution = false;\r\n      solution = false;\r\n      for (let i = 0; i < cols; i++) {\r\n        grid[i] = new Array(rows);\r\n      }\r\n\r\n      for (let i = 0; i < cols; i++) {\r\n        for (let j = 0; j < rows; j++) {\r\n          grid[i][j] = new Cell(i, j, rows, cols);\r\n          grid[i][j].addNeighbours();\r\n        }\r\n      }\r\n    }\r\n    start = this.state.start;\r\n    end = this.state.end;\r\n    if (start) openSet.push(start);\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    for (let i = 0; i < cols; i++) {\r\n      grid[i] = new Array(rows);\r\n    }\r\n\r\n    for (let i = 0; i < cols; i++) {\r\n      for (let j = 0; j < rows; j++) {\r\n        grid[i][j] = new Cell(i, j, rows, cols);\r\n        grid[i][j].addNeighbours();\r\n      }\r\n    }\r\n    start = this.state.start;\r\n    end = this.state.end;\r\n    if (start) openSet.push(start);\r\n    \r\n  };\r\n\r\n  setup = (p5, parent) => {\r\n    let xyz = p5.createCanvas(1200, 500).parent(parent);\r\n    let x = (p5.windowWidth - p5.width) / 2;\r\n    let y = (p5.windowHeight - p5.height) / 2;\r\n    xyz.position(x, y);\r\n    cols = p5.width / side;\r\n    rows = p5.height / side;\r\n    // p5.frameRate();\r\n  };\r\n  \r\n  draw = (p5) => {\r\n    console.log(p5.frameRate);\r\n    if (!noSolution && !solution) {\r\n      p5.background(0);\r\n      if (start && end) {\r\n        if (openSet.length > 0) {\r\n          let lowestIndex = 0;\r\n          for (let i = 0; i < openSet.length; i++) {\r\n            if (openSet[i].f < openSet[lowestIndex].f) lowestIndex = i;\r\n          }\r\n          current = openSet[lowestIndex];\r\n          if (current === end) {\r\n            solution = true;\r\n          }\r\n          this.removeFromArray(openSet, current);\r\n          closedSet.push(current);\r\n\r\n          let neighbours = current.neighbours;\r\n          for (let i = 0; i < neighbours.length; i++) {\r\n            let [x, y] = neighbours[i];\r\n            let neighbour = grid[x][y];\r\n            if (!closedSet.includes(neighbour) && !neighbour.wall) {\r\n              let tempG = current.g + 1;\r\n              if (openSet.includes(neighbour)) {\r\n                if (tempG < neighbour.g) {\r\n                  neighbour.g = tempG;\r\n                  neighbour.prev = current;\r\n                  neighbour.f = neighbour.g + neighbour.h;\r\n                }\r\n              } else {\r\n                neighbour.g = tempG;\r\n                openSet.push(neighbour);\r\n                neighbour.prev = current;\r\n                neighbour.f = neighbour.g + neighbour.h;\r\n              }\r\n            }\r\n          }\r\n        } else if(!solution) {\r\n          noSolution = true;\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < cols; i++) {\r\n        for (let j = 0; j < rows; j++) {\r\n          let x = i * side;\r\n          let y = j * side;\r\n          p5.fill(255);\r\n          p5.stroke(0);\r\n          if (grid[i][j].wall) {\r\n            p5.fill(0);\r\n            p5.stroke(0);\r\n          }\r\n          if (grid[i][j] === start) {\r\n            p5.fill(233, 222, 21);\r\n          }\r\n          if (grid[i][j] === end) {\r\n            p5.fill(228, 31, 4);\r\n          }\r\n          p5.rect(x, y, side, side);\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < openSet.length; i++) {\r\n        let x = openSet[i].i;\r\n        let y = openSet[i].j;\r\n        x = x * side;\r\n        y = y * side;\r\n        p5.fill(139, 237, 151);\r\n        p5.stroke(0);\r\n        if (openSet[i] === start) {\r\n          p5.fill(233, 222, 21);\r\n        }\r\n        if (openSet[i] === end) {\r\n          p5.fill(228, 31, 4);\r\n        }\r\n        p5.rect(x, y, side, side);\r\n      }\r\n\r\n      for (let i = 0; i < closedSet.length; i++) {\r\n        let x = closedSet[i].i;\r\n        let y = closedSet[i].j;\r\n        x = x * side;\r\n        y = y * side;\r\n        p5.fill(4, 228, 226);\r\n        p5.stroke(0);\r\n        if (closedSet[i] === start) {\r\n          p5.fill(233, 222, 21);\r\n        } else if (closedSet[i] === end) {\r\n          p5.fill(228, 31, 4);\r\n        }\r\n        p5.rect(x, y, side, side);\r\n      }\r\n\r\n      if (!noSolution && current) {\r\n        path = [];\r\n        path.push(current);\r\n        while (current.prev) {\r\n          path.push(current.prev);\r\n          current = current.prev;\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < path.length; i++) {\r\n        let x = path[i].i;\r\n        let y = path[i].j;\r\n        x = x * side;\r\n        y = y * side;\r\n        p5.fill(0, 0, 255);\r\n        p5.stroke(0);\r\n        if (path[i] === start) {\r\n          p5.fill(233, 222, 21);\r\n        } else if (path[i] === end) {\r\n          p5.fill(228, 31, 4);\r\n        }\r\n        p5.rect(x, y, side, side);\r\n      }\r\n    }\r\n\r\n    else if(noSolution){\r\n      console.log(\"NO solution\");\r\n    }\r\n  };\r\n\r\n  mousePressed = (e) => {\r\n    let x = e.mouseX;\r\n    let y = e.mouseY;\r\n    let i = Math.floor(x / side);\r\n    let j = Math.floor(y / side);\r\n    if (i >= 0 && j >= 0 && i < cols && j < rows && !grid[i][j].wall) {\r\n      if (!this.state.start) this.setState({ start: grid[i][j], stage: 1 });\r\n      else if (!this.state.end) this.setState({ end: grid[i][j], stage: 2 });\r\n    }\r\n  };\r\n\r\n  removeFromArray(array, element) {\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n      if (array[i] === element) array.splice(i, 1);\r\n    }\r\n  }\r\n\r\n  onBackButtonClick = () => {\r\n    openSet = [];\r\n    closedSet = [];\r\n    noSolution = false;\r\n    path = [];\r\n    current = null;\r\n    reLoad = false;\r\n    noSolution = false;\r\n    solution = false;\r\n    this.props.onBackButtonClick();\r\n  };\r\n\r\n  onClearButtonClick = () => {\r\n    reLoad = true;\r\n    this.setState({ start: null, end: null, stage: 0 });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar\r\n          stage={this.state.stage}\r\n          algo=\"Dijkstra\"\r\n          onBackButtonClick={this.onBackButtonClick}\r\n          onClearButtonClick={this.onClearButtonClick}\r\n        />\r\n        <Sketch\r\n          setup={this.setup}\r\n          draw={this.draw}\r\n          mousePressed={this.mousePressed}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dijkstra;\r\n"]},"metadata":{},"sourceType":"module"}