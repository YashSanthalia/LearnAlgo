{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = exports.serialize = exports.test = void 0;\n\nvar _collections = require('../collections');\n/**\r\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n\n/* eslint-disable local/ban-types-eventually */\n\n\nconst SPACE = ' ';\nconst OBJECT_NAMES = ['DOMStringMap', 'NamedNodeMap'];\nconst ARRAY_REGEXP = /^(HTML\\w*Collection|NodeList)$/;\n\nconst testName = name => OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);\n\nconst test = val => val && val.constructor && !!val.constructor.name && testName(val.constructor.name);\n\nexports.test = test;\n\nconst isNamedNodeMap = collection => collection.constructor.name === 'NamedNodeMap';\n\nconst serialize = (collection, config, indentation, depth, refs, printer) => {\n  const name = collection.constructor.name;\n\n  if (++depth > config.maxDepth) {\n    return '[' + name + ']';\n  }\n\n  return (config.min ? '' : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? '{' + (0, _collections.printObjectProperties)(isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => {\n    props[attribute.name] = attribute.value;\n    return props;\n  }, {}) : { ...collection\n  }, config, indentation, depth, refs, printer) + '}' : '[' + (0, _collections.printListItems)(Array.from(collection), config, indentation, depth, refs, printer) + ']');\n};\n\nexports.serialize = serialize;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/yash santhalia/Desktop/React/algo/node_modules/pretty-format/build/plugins/DOMCollection.js"],"names":["Object","defineProperty","exports","value","default","serialize","test","_collections","require","SPACE","OBJECT_NAMES","ARRAY_REGEXP","testName","name","indexOf","val","constructor","isNamedNodeMap","collection","config","indentation","depth","refs","printer","maxDepth","min","printObjectProperties","Array","from","reduce","props","attribute","printListItems","plugin","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACI,IAAR,GAAe,KAAK,CAA1D;;AAEA,IAAIC,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AACA,MAAMC,KAAK,GAAG,GAAd;AACA,MAAMC,YAAY,GAAG,CAAC,cAAD,EAAiB,cAAjB,CAArB;AACA,MAAMC,YAAY,GAAG,gCAArB;;AAEA,MAAMC,QAAQ,GAAGC,IAAI,IACnBH,YAAY,CAACI,OAAb,CAAqBD,IAArB,MAA+B,CAAC,CAAhC,IAAqCF,YAAY,CAACL,IAAb,CAAkBO,IAAlB,CADvC;;AAGA,MAAMP,IAAI,GAAGS,GAAG,IACdA,GAAG,IACHA,GAAG,CAACC,WADJ,IAEA,CAAC,CAACD,GAAG,CAACC,WAAJ,CAAgBH,IAFlB,IAGAD,QAAQ,CAACG,GAAG,CAACC,WAAJ,CAAgBH,IAAjB,CAJV;;AAMAX,OAAO,CAACI,IAAR,GAAeA,IAAf;;AAEA,MAAMW,cAAc,GAAGC,UAAU,IAC/BA,UAAU,CAACF,WAAX,CAAuBH,IAAvB,KAAgC,cADlC;;AAGA,MAAMR,SAAS,GAAG,CAACa,UAAD,EAAaC,MAAb,EAAqBC,WAArB,EAAkCC,KAAlC,EAAyCC,IAAzC,EAA+CC,OAA/C,KAA2D;AAC3E,QAAMV,IAAI,GAAGK,UAAU,CAACF,WAAX,CAAuBH,IAApC;;AAEA,MAAI,EAAEQ,KAAF,GAAUF,MAAM,CAACK,QAArB,EAA+B;AAC7B,WAAO,MAAMX,IAAN,GAAa,GAApB;AACD;;AAED,SACE,CAACM,MAAM,CAACM,GAAP,GAAa,EAAb,GAAkBZ,IAAI,GAAGJ,KAA1B,KACCC,YAAY,CAACI,OAAb,CAAqBD,IAArB,MAA+B,CAAC,CAAhC,GACG,MACA,CAAC,GAAGN,YAAY,CAACmB,qBAAjB,EACET,cAAc,CAACC,UAAD,CAAd,GACIS,KAAK,CAACC,IAAN,CAAWV,UAAX,EAAuBW,MAAvB,CAA8B,CAACC,KAAD,EAAQC,SAAR,KAAsB;AAClDD,IAAAA,KAAK,CAACC,SAAS,CAAClB,IAAX,CAAL,GAAwBkB,SAAS,CAAC5B,KAAlC;AACA,WAAO2B,KAAP;AACD,GAHD,EAGG,EAHH,CADJ,GAKI,EAAC,GAAGZ;AAAJ,GANN,EAOEC,MAPF,EAQEC,WARF,EASEC,KATF,EAUEC,IAVF,EAWEC,OAXF,CADA,GAcA,GAfH,GAgBG,MACA,CAAC,GAAGhB,YAAY,CAACyB,cAAjB,EACEL,KAAK,CAACC,IAAN,CAAWV,UAAX,CADF,EAEEC,MAFF,EAGEC,WAHF,EAIEC,KAJF,EAKEC,IALF,EAMEC,OANF,CADA,GASA,GA1BJ,CADF;AA6BD,CApCD;;AAsCArB,OAAO,CAACG,SAAR,GAAoBA,SAApB;AACA,MAAM4B,MAAM,GAAG;AACb5B,EAAAA,SADa;AAEbC,EAAAA;AAFa,CAAf;AAIA,IAAI4B,QAAQ,GAAGD,MAAf;AACA/B,OAAO,CAACE,OAAR,GAAkB8B,QAAlB","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', {\r\n  value: true\r\n});\r\nexports.default = exports.serialize = exports.test = void 0;\r\n\r\nvar _collections = require('../collections');\r\n\r\n/**\r\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n/* eslint-disable local/ban-types-eventually */\r\nconst SPACE = ' ';\r\nconst OBJECT_NAMES = ['DOMStringMap', 'NamedNodeMap'];\r\nconst ARRAY_REGEXP = /^(HTML\\w*Collection|NodeList)$/;\r\n\r\nconst testName = name =>\r\n  OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);\r\n\r\nconst test = val =>\r\n  val &&\r\n  val.constructor &&\r\n  !!val.constructor.name &&\r\n  testName(val.constructor.name);\r\n\r\nexports.test = test;\r\n\r\nconst isNamedNodeMap = collection =>\r\n  collection.constructor.name === 'NamedNodeMap';\r\n\r\nconst serialize = (collection, config, indentation, depth, refs, printer) => {\r\n  const name = collection.constructor.name;\r\n\r\n  if (++depth > config.maxDepth) {\r\n    return '[' + name + ']';\r\n  }\r\n\r\n  return (\r\n    (config.min ? '' : name + SPACE) +\r\n    (OBJECT_NAMES.indexOf(name) !== -1\r\n      ? '{' +\r\n        (0, _collections.printObjectProperties)(\r\n          isNamedNodeMap(collection)\r\n            ? Array.from(collection).reduce((props, attribute) => {\r\n                props[attribute.name] = attribute.value;\r\n                return props;\r\n              }, {})\r\n            : {...collection},\r\n          config,\r\n          indentation,\r\n          depth,\r\n          refs,\r\n          printer\r\n        ) +\r\n        '}'\r\n      : '[' +\r\n        (0, _collections.printListItems)(\r\n          Array.from(collection),\r\n          config,\r\n          indentation,\r\n          depth,\r\n          refs,\r\n          printer\r\n        ) +\r\n        ']')\r\n  );\r\n};\r\n\r\nexports.serialize = serialize;\r\nconst plugin = {\r\n  serialize,\r\n  test\r\n};\r\nvar _default = plugin;\r\nexports.default = _default;\r\n"]},"metadata":{},"sourceType":"script"}