{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yash santhalia\\\\Desktop\\\\React\\\\algo\\\\src\\\\AStar\\\\AStar.js\";\nimport React from \"react\";\nimport Sketch from \"react-p5\";\nimport Cell from \"./Cell\";\nimport NavBar from \"./components/NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet cols, rows;\nconst side = 20;\nlet grid = new Array(cols);\nlet openSet = [];\nlet closedSet = [];\nlet current = null;\nlet noSolution = false;\nlet path = [];\n\nclass AStar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      start: null,\n      end: null\n    };\n\n    this.setup = (p5, parent) => {\n      let xyz = p5.createCanvas(1200, 500).parent(parent);\n      let x = (p5.windowWidth - p5.width) / 2;\n      let y = (p5.windowHeight - p5.height) / 2;\n      xyz.position(x, y); // p5.frameRate(5);\n\n      cols = p5.width / side;\n      rows = p5.height / side;\n\n      for (let i = 0; i < cols; i++) {\n        grid[i] = new Array(rows);\n      }\n\n      for (let i = 0; i < cols; i++) {\n        for (let j = 0; j < rows; j++) {\n          grid[i][j] = new Cell(i, j, rows, cols);\n          grid[i][j].addNeighbours();\n        }\n      } // start = grid[0][0];\n      // end = grid[cols - 1][rows - 1];\n      // start.wall = false;\n      // end.wall = false;\n\n\n      openSet.push(start);\n    };\n\n    this.draw = p5 => {\n      p5.background(0);\n\n      if (start && end) {\n        if (openSet.length > 0) {\n          let lowestIndex = 0;\n\n          for (let i = 0; i < openSet.length; i++) {\n            if (openSet[i].f < openSet[lowestIndex].f) lowestIndex = i;\n          }\n\n          current = openSet[lowestIndex];\n\n          if (current === end) {\n            p5.noLoop();\n          }\n\n          this.removeFromArray(openSet, current);\n          closedSet.push(current);\n          let neighbours = current.neighbours;\n\n          for (let i = 0; i < neighbours.length; i++) {\n            let [x, y] = neighbours[i];\n            let neighbour = grid[x][y];\n\n            if (!closedSet.includes(neighbour) && !neighbour.wall) {\n              let tempG = current.g + 1;\n\n              if (openSet.includes(neighbour)) {\n                if (tempG < neighbour.g) {\n                  neighbour.g = tempG;\n                  neighbour.prev = current;\n                }\n              } else {\n                neighbour.g = tempG;\n                openSet.push(neighbour);\n                neighbour.prev = current;\n              }\n\n              neighbour.f = neighbour.g + neighbour.h;\n            }\n          }\n        } else {\n          noSolution = true;\n          p5.noLoop();\n        }\n      }\n\n      for (let i = 0; i < cols; i++) {\n        for (let j = 0; j < rows; j++) {\n          let x = i * side;\n          let y = j * side;\n          p5.fill(255);\n          p5.stroke(0);\n\n          if (grid[i][j].wall) {\n            p5.fill(0);\n            p5.stroke(0);\n          }\n\n          p5.rect(x, y, side, side);\n        }\n      }\n\n      for (let i = 0; i < openSet.length; i++) {\n        let x = openSet[i].i;\n        let y = openSet[i].j;\n        x = x * side;\n        y = y * side;\n        p5.fill(0, 255, 0);\n        p5.stroke(0);\n\n        if (openSet[i].wall) {\n          p5.fill(0);\n          p5.stroke(0);\n        }\n\n        p5.rect(x, y, side, side);\n      }\n\n      for (let i = 0; i < closedSet.length; i++) {\n        let x = closedSet[i].i;\n        let y = closedSet[i].j;\n        x = x * side;\n        y = y * side;\n        p5.fill(255, 0, 0);\n        p5.stroke(0);\n\n        if (closedSet[i].wall) {\n          p5.fill(0);\n          p5.stroke(0);\n        }\n\n        p5.rect(x, y, side, side);\n      }\n\n      if (!noSolution) {\n        path = [];\n        path.push(current);\n\n        while (current.prev) {\n          path.push(current.prev);\n          current = current.prev;\n        }\n      }\n\n      for (let i = 0; i < path.length; i++) {\n        let x = path[i].i;\n        let y = path[i].j;\n        x = x * side;\n        y = y * side;\n        p5.fill(0, 0, 255);\n        p5.stroke(0);\n        p5.rect(x, y, side, side);\n      }\n    };\n  }\n\n  removeFromArray(array, element) {\n    for (let i = array.length - 1; i >= 0; i--) {\n      if (array[i] === element) array.splice(i, 1);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sketch, {\n        setup: this.setup,\n        draw: this.draw\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default AStar;","map":{"version":3,"sources":["C:/Users/yash santhalia/Desktop/React/algo/src/AStar/AStar.js"],"names":["React","Sketch","Cell","NavBar","cols","rows","side","grid","Array","openSet","closedSet","current","noSolution","path","AStar","Component","state","start","end","setup","p5","parent","xyz","createCanvas","x","windowWidth","width","y","windowHeight","height","position","i","j","addNeighbours","push","draw","background","length","lowestIndex","f","noLoop","removeFromArray","neighbours","neighbour","includes","wall","tempG","g","prev","h","fill","stroke","rect","array","element","splice","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport Cell from \"./Cell\";\r\nimport NavBar from \"./components/NavBar\";\r\n\r\nlet cols, rows;\r\nconst side = 20;\r\nlet grid = new Array(cols);\r\nlet openSet = [];\r\nlet closedSet = [];\r\nlet current = null;\r\nlet noSolution = false;\r\nlet path = [];\r\n\r\nclass AStar extends React.Component {\r\n  state = { start: null, end: null };\r\n\r\n  setup = (p5, parent) => {\r\n    let xyz = p5.createCanvas(1200, 500).parent(parent);\r\n    let x = (p5.windowWidth - p5.width) / 2;\r\n    let y = (p5.windowHeight - p5.height) / 2;\r\n    xyz.position(x, y);\r\n    // p5.frameRate(5);\r\n    cols = p5.width / side;\r\n    rows = p5.height / side;\r\n    for (let i = 0; i < cols; i++) {\r\n      grid[i] = new Array(rows);\r\n    }\r\n\r\n    for (let i = 0; i < cols; i++) {\r\n      for (let j = 0; j < rows; j++) {\r\n        grid[i][j] = new Cell(i, j, rows, cols);\r\n        grid[i][j].addNeighbours();\r\n      }\r\n    }\r\n    // start = grid[0][0];\r\n    // end = grid[cols - 1][rows - 1];\r\n    // start.wall = false;\r\n    // end.wall = false;\r\n    openSet.push(start);\r\n  };\r\n\r\n  draw = (p5) => {\r\n    p5.background(0);\r\n    if (start && end) {\r\n      if (openSet.length > 0) {\r\n        let lowestIndex = 0;\r\n        for (let i = 0; i < openSet.length; i++) {\r\n          if (openSet[i].f < openSet[lowestIndex].f) lowestIndex = i;\r\n        }\r\n        current = openSet[lowestIndex];\r\n        if (current === end) {\r\n          p5.noLoop();\r\n        }\r\n        this.removeFromArray(openSet, current);\r\n        closedSet.push(current);\r\n\r\n        let neighbours = current.neighbours;\r\n        for (let i = 0; i < neighbours.length; i++) {\r\n          let [x, y] = neighbours[i];\r\n          let neighbour = grid[x][y];\r\n          if (!closedSet.includes(neighbour) && !neighbour.wall) {\r\n            let tempG = current.g + 1;\r\n            if (openSet.includes(neighbour)) {\r\n              if (tempG < neighbour.g) {\r\n                neighbour.g = tempG;\r\n                neighbour.prev = current;\r\n              }\r\n            } else {\r\n              neighbour.g = tempG;\r\n              openSet.push(neighbour);\r\n              neighbour.prev = current;\r\n            }\r\n            neighbour.f = neighbour.g + neighbour.h;\r\n          }\r\n        }\r\n      } else {\r\n        noSolution = true;\r\n        p5.noLoop();\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < cols; i++) {\r\n      for (let j = 0; j < rows; j++) {\r\n        let x = i * side;\r\n        let y = j * side;\r\n        p5.fill(255);\r\n        p5.stroke(0);\r\n        if (grid[i][j].wall) {\r\n          p5.fill(0);\r\n          p5.stroke(0);\r\n        }\r\n        p5.rect(x, y, side, side);\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < openSet.length; i++) {\r\n      let x = openSet[i].i;\r\n      let y = openSet[i].j;\r\n      x = x * side;\r\n      y = y * side;\r\n      p5.fill(0, 255, 0);\r\n      p5.stroke(0);\r\n      if (openSet[i].wall) {\r\n        p5.fill(0);\r\n        p5.stroke(0);\r\n      }\r\n      p5.rect(x, y, side, side);\r\n    }\r\n\r\n    for (let i = 0; i < closedSet.length; i++) {\r\n      let x = closedSet[i].i;\r\n      let y = closedSet[i].j;\r\n      x = x * side;\r\n      y = y * side;\r\n      p5.fill(255, 0, 0);\r\n      p5.stroke(0);\r\n      if (closedSet[i].wall) {\r\n        p5.fill(0);\r\n        p5.stroke(0);\r\n      }\r\n      p5.rect(x, y, side, side);\r\n    }\r\n    if (!noSolution) {\r\n      path = [];\r\n      path.push(current);\r\n      while (current.prev) {\r\n        path.push(current.prev);\r\n        current = current.prev;\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n      let x = path[i].i;\r\n      let y = path[i].j;\r\n      x = x * side;\r\n      y = y * side;\r\n      p5.fill(0, 0, 255);\r\n      p5.stroke(0);\r\n      p5.rect(x, y, side, side);\r\n    }\r\n  };\r\n\r\n  removeFromArray(array, element) {\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n      if (array[i] === element) array.splice(i, 1);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar />\r\n        <Sketch setup={this.setup} draw={this.draw} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AStar;\r\n"]},"metadata":{},"sourceType":"module"}