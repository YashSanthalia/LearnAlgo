{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yash santhalia\\\\Desktop\\\\React\\\\algo\\\\src\\\\TSP\\\\TSP.js\";\nimport React from \"react\";\nimport Sketch from \"react-p5\";\nimport Point from \"./Point\";\nimport NavBar from \"./NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet points = [];\nconst width = 800;\nconst height = 500;\nlet minDistance = 9999999;\nlet minDistancePath = [];\nlet order = [];\nlet complete = false;\nlet flag = false;\nlet population = [];\nlet populationSize = 100;\n\nclass TSP extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      stage: 0\n    };\n\n    this.setup = (p5, parent) => {\n      let xyz = p5.createCanvas(width, height).parent(parent);\n      let x = (p5.windowWidth - p5.width) / 2;\n      let y = (p5.windowHeight - p5.height) / 2;\n      xyz.position(x, y);\n    };\n\n    this.draw = p5 => {\n      if (!complete) {\n        p5.background(0);\n\n        if (this.state.stage === 0) {\n          p5.noStroke();\n          p5.fill(255);\n          p5.noCursor();\n          p5.ellipse(p5.mouseX, p5.mouseY, 12);\n        }\n\n        this.showPoints(p5);\n\n        if (this.state.stage === 1) {\n          this.showLines(order, p5, 255, 255, 255, 2);\n          let currentDistance = this.calcPathDistance(p5);\n\n          if (currentDistance < minDistance) {\n            minDistance = currentDistance;\n            minDistancePath = order.slice();\n            console.log(minDistance);\n          }\n\n          this.showLines(minDistancePath, p5, 255, 0, 255, 4);\n          this.nextOrder(p5);\n        }\n      } else if (!flag) {\n        this.showFinalPath(p5);\n      }\n    };\n\n    this.showFinalPath = p5 => {\n      p5.background(0);\n      this.showPoints(p5);\n      this.showLines(minDistancePath, p5, 255, 0, 255, 4);\n      flag = true;\n    };\n\n    this.calcPathDistance = p5 => {\n      let dist = 0;\n\n      for (let i = 1; i < order.length; i++) {\n        dist += p5.dist(points[order[i]].x, points[order[i]].y, points[order[i - 1]].x, points[order[i - 1]].y);\n      }\n\n      return dist;\n    };\n\n    this.showLines = (order, p5, r, g, b, strokeWeight) => {\n      p5.beginShape();\n      p5.stroke(r, g, b);\n      p5.strokeWeight(strokeWeight);\n      p5.noFill();\n\n      for (let i = 0; i < order.length; i++) {\n        p5.vertex(points[order[i]].x, points[order[i]].y);\n      }\n\n      p5.endShape();\n    };\n\n    this.showPoints = p5 => {\n      for (let i = 0; i < points.length; i++) {\n        p5.fill(points[i].r, points[i].g, points[i].b);\n        p5.ellipse(points[i].x, points[i].y, 15, 15);\n      }\n    };\n\n    this.mousePressed = e => {\n      if (this.state.stage === 0) {\n        let x = e.mouseX;\n        let y = e.mouseY;\n\n        if (x > 0 && x < width && y > 0 && y < height) {\n          points.push(new Point(x, y));\n        }\n      }\n    };\n\n    this.onBackButtonClick = () => {\n      this.cleaning();\n      this.props.onBackButtonClick();\n    };\n\n    this.onClearButtonClick = () => {\n      this.cleaning();\n      this.setState({\n        stage: 0\n      });\n    };\n\n    this.cleaning = () => {\n      minDistance = 999999;\n      minDistancePath = [];\n      points = [];\n      order = [];\n      complete = false;\n    };\n\n    this.onStartButtonClick = () => {\n      order = [];\n\n      for (let i = 0; i < points.length; i++) {\n        order.push(i);\n      }\n\n      console.log(order);\n      this.setState({\n        stage: 1\n      });\n    };\n  }\n\n  // nextOrder = (p5) => {\n  //   var largestI = -1;\n  //   for (let i = 0; i < order.length - 1; i++) {\n  //     if (order[i] < order[i + 1]) {\n  //       largestI = i;\n  //     }\n  //   }\n  //   if (largestI == -1) {\n  //     complete = true;\n  //     console.log(\"finished\");\n  //   }\n  //   var largestJ = -1;\n  //   for (let j = 0; j < order.length; j++) {\n  //     if (order[largestI] < order[j]) {\n  //       largestJ = j;\n  //     }\n  //   }\n  //   this.swap(order, largestI, largestJ);\n  //   var endArray = order.splice(largestI + 1);\n  //   endArray.reverse();\n  //   order = order.concat(endArray);\n  // };\n  swap(array, i, j) {\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        stage: this.state.stage,\n        onBackButtonClick: this.onBackButtonClick,\n        onClearButtonClick: this.onClearButtonClick,\n        onStartButtonClick: this.onStartButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sketch, {\n        setup: this.setup,\n        draw: this.draw,\n        mousePressed: this.mousePressed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TSP;","map":{"version":3,"sources":["C:/Users/yash santhalia/Desktop/React/algo/src/TSP/TSP.js"],"names":["React","Sketch","Point","NavBar","points","width","height","minDistance","minDistancePath","order","complete","flag","population","populationSize","TSP","Component","state","stage","setup","p5","parent","xyz","createCanvas","x","windowWidth","y","windowHeight","position","draw","background","noStroke","fill","noCursor","ellipse","mouseX","mouseY","showPoints","showLines","currentDistance","calcPathDistance","slice","console","log","nextOrder","showFinalPath","dist","i","length","r","g","b","strokeWeight","beginShape","stroke","noFill","vertex","endShape","mousePressed","e","push","onBackButtonClick","cleaning","props","onClearButtonClick","setState","onStartButtonClick","swap","array","j","temp","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,IAAIC,MAAM,GAAG,EAAb;AACA,MAAMC,KAAK,GAAG,GAAd;AACA,MAAMC,MAAM,GAAG,GAAf;AACA,IAAIC,WAAW,GAAG,OAAlB;AACA,IAAIC,eAAe,GAAG,EAAtB;AACA,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,QAAQ,GAAG,KAAf;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,cAAc,GAAG,GAArB;;AAEA,MAAMC,GAAN,SAAkBd,KAAK,CAACe,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADwB;;AAAA,SAGhCC,KAHgC,GAGxB,CAACC,EAAD,EAAKC,MAAL,KAAgB;AACtB,UAAIC,GAAG,GAAGF,EAAE,CAACG,YAAH,CAAgBjB,KAAhB,EAAuBC,MAAvB,EAA+Bc,MAA/B,CAAsCA,MAAtC,CAAV;AACA,UAAIG,CAAC,GAAG,CAACJ,EAAE,CAACK,WAAH,GAAiBL,EAAE,CAACd,KAArB,IAA8B,CAAtC;AACA,UAAIoB,CAAC,GAAG,CAACN,EAAE,CAACO,YAAH,GAAkBP,EAAE,CAACb,MAAtB,IAAgC,CAAxC;AACAe,MAAAA,GAAG,CAACM,QAAJ,CAAaJ,CAAb,EAAgBE,CAAhB;AACD,KAR+B;;AAAA,SAUhCG,IAVgC,GAUxBT,EAAD,IAAQ;AACb,UAAI,CAACT,QAAL,EAAe;AACbS,QAAAA,EAAE,CAACU,UAAH,CAAc,CAAd;;AACA,YAAI,KAAKb,KAAL,CAAWC,KAAX,KAAqB,CAAzB,EAA4B;AAC1BE,UAAAA,EAAE,CAACW,QAAH;AACAX,UAAAA,EAAE,CAACY,IAAH,CAAQ,GAAR;AACAZ,UAAAA,EAAE,CAACa,QAAH;AACAb,UAAAA,EAAE,CAACc,OAAH,CAAWd,EAAE,CAACe,MAAd,EAAsBf,EAAE,CAACgB,MAAzB,EAAiC,EAAjC;AACD;;AACD,aAAKC,UAAL,CAAgBjB,EAAhB;;AACA,YAAI,KAAKH,KAAL,CAAWC,KAAX,KAAqB,CAAzB,EAA4B;AAC1B,eAAKoB,SAAL,CAAe5B,KAAf,EAAsBU,EAAtB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,CAAzC;AACA,cAAImB,eAAe,GAAG,KAAKC,gBAAL,CAAsBpB,EAAtB,CAAtB;;AACA,cAAImB,eAAe,GAAG/B,WAAtB,EAAmC;AACjCA,YAAAA,WAAW,GAAG+B,eAAd;AACA9B,YAAAA,eAAe,GAAGC,KAAK,CAAC+B,KAAN,EAAlB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYnC,WAAZ;AACD;;AACD,eAAK8B,SAAL,CAAe7B,eAAf,EAAgCW,EAAhC,EAAoC,GAApC,EAAyC,CAAzC,EAA4C,GAA5C,EAAiD,CAAjD;AACA,eAAKwB,SAAL,CAAexB,EAAf;AACD;AACF,OApBD,MAoBO,IAAI,CAACR,IAAL,EAAW;AACd,aAAKiC,aAAL,CAAmBzB,EAAnB;AACH;AACF,KAlC+B;;AAAA,SAoChCyB,aApCgC,GAoCfzB,EAAD,IAAQ;AACtBA,MAAAA,EAAE,CAACU,UAAH,CAAc,CAAd;AACA,WAAKO,UAAL,CAAgBjB,EAAhB;AACA,WAAKkB,SAAL,CAAe7B,eAAf,EAAgCW,EAAhC,EAAoC,GAApC,EAAyC,CAAzC,EAA4C,GAA5C,EAAiD,CAAjD;AACAR,MAAAA,IAAI,GAAG,IAAP;AACD,KAzC+B;;AAAA,SA2ChC4B,gBA3CgC,GA2CZpB,EAAD,IAAQ;AACzB,UAAI0B,IAAI,GAAG,CAAX;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrC,KAAK,CAACsC,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCD,QAAAA,IAAI,IAAI1B,EAAE,CAAC0B,IAAH,CACNzC,MAAM,CAACK,KAAK,CAACqC,CAAD,CAAN,CAAN,CAAiBvB,CADX,EAENnB,MAAM,CAACK,KAAK,CAACqC,CAAD,CAAN,CAAN,CAAiBrB,CAFX,EAGNrB,MAAM,CAACK,KAAK,CAACqC,CAAC,GAAG,CAAL,CAAN,CAAN,CAAqBvB,CAHf,EAINnB,MAAM,CAACK,KAAK,CAACqC,CAAC,GAAG,CAAL,CAAN,CAAN,CAAqBrB,CAJf,CAAR;AAMD;;AACD,aAAOoB,IAAP;AACD,KAtD+B;;AAAA,SAqFhCR,SArFgC,GAqFpB,CAAC5B,KAAD,EAAQU,EAAR,EAAY6B,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqBC,YAArB,KAAsC;AAChDhC,MAAAA,EAAE,CAACiC,UAAH;AACAjC,MAAAA,EAAE,CAACkC,MAAH,CAAUL,CAAV,EAAaC,CAAb,EAAgBC,CAAhB;AACA/B,MAAAA,EAAE,CAACgC,YAAH,CAAgBA,YAAhB;AACAhC,MAAAA,EAAE,CAACmC,MAAH;;AACA,WAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrC,KAAK,CAACsC,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC3B,QAAAA,EAAE,CAACoC,MAAH,CAAUnD,MAAM,CAACK,KAAK,CAACqC,CAAD,CAAN,CAAN,CAAiBvB,CAA3B,EAA8BnB,MAAM,CAACK,KAAK,CAACqC,CAAD,CAAN,CAAN,CAAiBrB,CAA/C;AACD;;AACDN,MAAAA,EAAE,CAACqC,QAAH;AACD,KA9F+B;;AAAA,SAgGhCpB,UAhGgC,GAgGlBjB,EAAD,IAAQ;AACnB,WAAK,IAAI2B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1C,MAAM,CAAC2C,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC3B,QAAAA,EAAE,CAACY,IAAH,CAAQ3B,MAAM,CAAC0C,CAAD,CAAN,CAAUE,CAAlB,EAAqB5C,MAAM,CAAC0C,CAAD,CAAN,CAAUG,CAA/B,EAAkC7C,MAAM,CAAC0C,CAAD,CAAN,CAAUI,CAA5C;AACA/B,QAAAA,EAAE,CAACc,OAAH,CAAW7B,MAAM,CAAC0C,CAAD,CAAN,CAAUvB,CAArB,EAAwBnB,MAAM,CAAC0C,CAAD,CAAN,CAAUrB,CAAlC,EAAqC,EAArC,EAAyC,EAAzC;AACD;AACF,KArG+B;;AAAA,SAuGhCgC,YAvGgC,GAuGhBC,CAAD,IAAO;AACpB,UAAI,KAAK1C,KAAL,CAAWC,KAAX,KAAqB,CAAzB,EAA4B;AAC1B,YAAIM,CAAC,GAAGmC,CAAC,CAACxB,MAAV;AACA,YAAIT,CAAC,GAAGiC,CAAC,CAACvB,MAAV;;AACA,YAAIZ,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAGlB,KAAb,IAAsBoB,CAAC,GAAG,CAA1B,IAA+BA,CAAC,GAAGnB,MAAvC,EAA+C;AAC7CF,UAAAA,MAAM,CAACuD,IAAP,CAAY,IAAIzD,KAAJ,CAAUqB,CAAV,EAAaE,CAAb,CAAZ;AACD;AACF;AACF,KA/G+B;;AAAA,SAiHhCmC,iBAjHgC,GAiHZ,MAAM;AACxB,WAAKC,QAAL;AACA,WAAKC,KAAL,CAAWF,iBAAX;AACD,KApH+B;;AAAA,SAsHhCG,kBAtHgC,GAsHX,MAAM;AACzB,WAAKF,QAAL;AACA,WAAKG,QAAL,CAAc;AAAE/C,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD,KAzH+B;;AAAA,SA2HhC4C,QA3HgC,GA2HrB,MAAM;AACftD,MAAAA,WAAW,GAAG,MAAd;AACAC,MAAAA,eAAe,GAAG,EAAlB;AACAJ,MAAAA,MAAM,GAAG,EAAT;AACAK,MAAAA,KAAK,GAAG,EAAR;AACAC,MAAAA,QAAQ,GAAG,KAAX;AACD,KAjI+B;;AAAA,SAmIhCuD,kBAnIgC,GAmIX,MAAM;AACzBxD,MAAAA,KAAK,GAAG,EAAR;;AACA,WAAK,IAAIqC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1C,MAAM,CAAC2C,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCrC,QAAAA,KAAK,CAACkD,IAAN,CAAWb,CAAX;AACD;;AACDL,MAAAA,OAAO,CAACC,GAAR,CAAYjC,KAAZ;AACA,WAAKuD,QAAL,CAAc;AAAE/C,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD,KA1I+B;AAAA;;AAwDhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAiD,EAAAA,IAAI,CAACC,KAAD,EAAQrB,CAAR,EAAWsB,CAAX,EAAc;AAChB,QAAIC,IAAI,GAAGF,KAAK,CAACrB,CAAD,CAAhB;AACAqB,IAAAA,KAAK,CAACrB,CAAD,CAAL,GAAWqB,KAAK,CAACC,CAAD,CAAhB;AACAD,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWC,IAAX;AACD;;AAyDDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,MAAD;AACE,QAAA,KAAK,EAAE,KAAKtD,KAAL,CAAWC,KADpB;AAEE,QAAA,iBAAiB,EAAE,KAAK2C,iBAF1B;AAGE,QAAA,kBAAkB,EAAE,KAAKG,kBAH3B;AAIE,QAAA,kBAAkB,EAAE,KAAKE;AAJ3B;AAAA;AAAA;AAAA;AAAA,cADF,eAOE,QAAC,MAAD;AACE,QAAA,KAAK,EAAE,KAAK/C,KADd;AAEE,QAAA,IAAI,EAAE,KAAKU,IAFb;AAGE,QAAA,YAAY,EAAE,KAAK6B;AAHrB;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AA5J+B;;AA+JlC,eAAe3C,GAAf","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport Point from \"./Point\";\r\nimport NavBar from \"./NavBar\";\r\n\r\nlet points = [];\r\nconst width = 800;\r\nconst height = 500;\r\nlet minDistance = 9999999;\r\nlet minDistancePath = [];\r\nlet order = [];\r\nlet complete = false;\r\nlet flag = false;\r\nlet population = [];\r\nlet populationSize = 100;\r\n\r\nclass TSP extends React.Component {\r\n  state = { stage: 0 };\r\n\r\n  setup = (p5, parent) => {\r\n    let xyz = p5.createCanvas(width, height).parent(parent);\r\n    let x = (p5.windowWidth - p5.width) / 2;\r\n    let y = (p5.windowHeight - p5.height) / 2;\r\n    xyz.position(x, y);\r\n  };\r\n\r\n  draw = (p5) => {\r\n    if (!complete) {\r\n      p5.background(0);\r\n      if (this.state.stage === 0) {\r\n        p5.noStroke();\r\n        p5.fill(255);\r\n        p5.noCursor();\r\n        p5.ellipse(p5.mouseX, p5.mouseY, 12);\r\n      }\r\n      this.showPoints(p5);\r\n      if (this.state.stage === 1) {\r\n        this.showLines(order, p5, 255, 255, 255, 2);\r\n        let currentDistance = this.calcPathDistance(p5);\r\n        if (currentDistance < minDistance) {\r\n          minDistance = currentDistance;\r\n          minDistancePath = order.slice();\r\n          console.log(minDistance);\r\n        }\r\n        this.showLines(minDistancePath, p5, 255, 0, 255, 4);\r\n        this.nextOrder(p5);\r\n      }\r\n    } else if (!flag) {\r\n        this.showFinalPath(p5);\r\n    }\r\n  };\r\n\r\n  showFinalPath = (p5) => {\r\n    p5.background(0);\r\n    this.showPoints(p5);\r\n    this.showLines(minDistancePath, p5, 255, 0, 255, 4);\r\n    flag = true;\r\n  };\r\n\r\n  calcPathDistance = (p5) => {\r\n    let dist = 0;\r\n    for (let i = 1; i < order.length; i++) {\r\n      dist += p5.dist(\r\n        points[order[i]].x,\r\n        points[order[i]].y,\r\n        points[order[i - 1]].x,\r\n        points[order[i - 1]].y\r\n      );\r\n    }\r\n    return dist;\r\n  };\r\n\r\n  // nextOrder = (p5) => {\r\n  //   var largestI = -1;\r\n  //   for (let i = 0; i < order.length - 1; i++) {\r\n  //     if (order[i] < order[i + 1]) {\r\n  //       largestI = i;\r\n  //     }\r\n  //   }\r\n  //   if (largestI == -1) {\r\n  //     complete = true;\r\n  //     console.log(\"finished\");\r\n  //   }\r\n  //   var largestJ = -1;\r\n  //   for (let j = 0; j < order.length; j++) {\r\n  //     if (order[largestI] < order[j]) {\r\n  //       largestJ = j;\r\n  //     }\r\n  //   }\r\n  //   this.swap(order, largestI, largestJ);\r\n  //   var endArray = order.splice(largestI + 1);\r\n  //   endArray.reverse();\r\n  //   order = order.concat(endArray);\r\n  // };\r\n\r\n  swap(array, i, j) {\r\n    let temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n\r\n  showLines = (order, p5, r, g, b, strokeWeight) => {\r\n    p5.beginShape();\r\n    p5.stroke(r, g, b);\r\n    p5.strokeWeight(strokeWeight);\r\n    p5.noFill();\r\n    for (let i = 0; i < order.length; i++) {\r\n      p5.vertex(points[order[i]].x, points[order[i]].y);\r\n    }\r\n    p5.endShape();\r\n  };\r\n\r\n  showPoints = (p5) => {\r\n    for (let i = 0; i < points.length; i++) {\r\n      p5.fill(points[i].r, points[i].g, points[i].b);\r\n      p5.ellipse(points[i].x, points[i].y, 15, 15);\r\n    }\r\n  };\r\n\r\n  mousePressed = (e) => {\r\n    if (this.state.stage === 0) {\r\n      let x = e.mouseX;\r\n      let y = e.mouseY;\r\n      if (x > 0 && x < width && y > 0 && y < height) {\r\n        points.push(new Point(x, y));\r\n      }\r\n    }\r\n  };\r\n\r\n  onBackButtonClick = () => {\r\n    this.cleaning();\r\n    this.props.onBackButtonClick();\r\n  };\r\n\r\n  onClearButtonClick = () => {\r\n    this.cleaning();\r\n    this.setState({ stage: 0 });\r\n  };\r\n\r\n  cleaning = () => {\r\n    minDistance = 999999;\r\n    minDistancePath = [];\r\n    points = [];\r\n    order = [];\r\n    complete = false;\r\n  };\r\n\r\n  onStartButtonClick = () => {\r\n    order = [];\r\n    for (let i = 0; i < points.length; i++) {\r\n      order.push(i);\r\n    }\r\n    console.log(order);\r\n    this.setState({ stage: 1 });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar\r\n          stage={this.state.stage}\r\n          onBackButtonClick={this.onBackButtonClick}\r\n          onClearButtonClick={this.onClearButtonClick}\r\n          onStartButtonClick={this.onStartButtonClick}\r\n        />\r\n        <Sketch\r\n          setup={this.setup}\r\n          draw={this.draw}\r\n          mousePressed={this.mousePressed}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TSP;"]},"metadata":{},"sourceType":"module"}