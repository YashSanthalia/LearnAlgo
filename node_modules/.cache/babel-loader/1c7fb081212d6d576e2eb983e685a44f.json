{"ast":null,"code":"export function initializePopulation(population, order, populationSize) {\n  for (let i = 0; i < populationSize; i++) {\n    population[i] = shuffle(order);\n  }\n}\n\nfunction shuffle(array) {\n  let currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nexport function calcFitness(points, population, fitness) {\n  for (let i = 0; i < population.length; i++) {\n    let d = calcDist(points, population[i]);\n    fitness[i] = 1 / d;\n  }\n\n  normalizeFitness(fitness);\n}\n\nfunction normalizeFitness(fitness) {\n  let totalFitness = 0;\n\n  for (let i = 0; i < fitness.length; i++) {\n    totalFitness += fitness[i];\n  }\n\n  for (let i = 0; i < fitness.length; i++) {\n    fitness[i] = fitness[i] / totalFitness;\n  }\n}\n\nfunction calcDist(points, order) {\n  let sum = 0;\n\n  for (let i = 1; i < order.length; i++) {\n    let x1 = points[order[i]].x;\n    let y1 = points[order[i]].y;\n    let x2 = points[order[i - 1]].x;\n    let y2 = points[order[i - 1]].y;\n    let x = x1 - x2;\n    let y = y1 - y2;\n    let d = Math.sqrt(x * x + y * y);\n    sum += d;\n  }\n\n  return sum;\n}\n\nexport function getCurrentBest(fitness) {\n  let index = -1;\n  let best = -1;\n\n  for (let i = 0; i < fitness.length; i++) {\n    if (fitness[i] > best) {\n      best = fitness[i];\n      index = i;\n    }\n  }\n\n  return index;\n}","map":{"version":3,"sources":["C:/Users/yash santhalia/Desktop/React/algo/src/TSP/GeneticAlgo.js"],"names":["initializePopulation","population","order","populationSize","i","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","calcFitness","points","fitness","d","calcDist","normalizeFitness","totalFitness","sum","x1","x","y1","y","x2","y2","sqrt","getCurrentBest","index","best"],"mappings":"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","sourcesContent":["export function initializePopulation(population, order, populationSize) {\r\n  for (let i = 0; i < populationSize; i++) {\r\n    population[i] = shuffle(order);\r\n  }\r\n}\r\n\r\nfunction shuffle(array) {\r\n  let currentIndex = array.length,\r\n    temporaryValue,\r\n    randomIndex;\r\n  while (0 !== currentIndex) {\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nexport function calcFitness(points, population, fitness) {\r\n  for (let i = 0; i < population.length; i++) {\r\n      let d = calcDist(points, population[i]);\r\n      fitness[i] = 1/d;\r\n  }\r\n  normalizeFitness(fitness);\r\n}\r\n\r\nfunction normalizeFitness(fitness){\r\n    let totalFitness = 0;\r\n    for(let i =  0 ; i < fitness.length ; i++){\r\n        totalFitness += fitness[i]; \r\n    }\r\n    for(let i =  0 ; i < fitness.length ; i++){\r\n        fitness[i] = fitness[i] / totalFitness; \r\n    }\r\n\r\n}\r\n\r\nfunction calcDist(points, order){\r\n    let sum = 0;\r\n    for(let i = 1 ; i < order.length ; i++){\r\n        let x1 = points[order[i]].x;\r\n        let y1 = points[order[i]].y;\r\n        let x2 = points[order[i-1]].x;\r\n        let y2 = points[order[i-1]].y;\r\n        let x = x1-x2;\r\n        let y = y1-y2;\r\n        let d = Math.sqrt(x*x + y*y);\r\n        sum += d;\r\n    }\r\n    return sum;\r\n}\r\n\r\nexport function getCurrentBest(fitness){\r\n    let index = -1;\r\n    let best = -1;\r\n    for(let i = 0 ; i < fitness.length ; i++){\r\n        if(fitness[i] > best){\r\n            best = fitness[i];\r\n            index = i;\r\n        }\r\n    }\r\n    return index;\r\n}"]},"metadata":{},"sourceType":"module"}