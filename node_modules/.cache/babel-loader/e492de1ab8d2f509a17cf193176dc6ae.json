{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = [];\n  quicksort(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quicksort(array, start, end, animations) {\n  if (start < end) {\n    const pIndex = randomisedPartition(array, start, end, animations);\n    quicksort(array, start, pIndex - 1, animations);\n    quicksort(array, pIndex + 1, end, animations);\n  }\n}\n\nfunction randomisedPartition(array, start, end, animations) {\n  const k = Math.floor(Math.random() * (end - start + 1)) + start;\n  animations.push([k, array[end]]);\n  animations.push([end, array[k]]);\n  let temp = array[k];\n  array[k] = array[end];\n  array[end] = temp;\n  return partition(array, start, end, animations);\n}\n\nfunction partition(array, start, end, animations) {\n  let pivot = array[end];\n  let pIndex = start;\n\n  for (let i = start; i < end; i++) {\n    if (array[i] < pivot) {\n      animations.push([i, array[pIndex]]);\n      animations.push([pIndex, array[i]]);\n      let temp = array[i];\n      array[i] = array[pIndex];\n      array[pIndex] = temp;\n      pIndex++;\n    }\n  }\n\n  animations.push([end, array[pIndex]]);\n  animations.push([pIndex, array[end]]);\n  array[end] = array[pIndex];\n  array[pIndex] = pivot;\n  return pIndex;\n}","map":{"version":3,"sources":["C:/Users/yash santhalia/Desktop/React/algo/src/Sorting/components/sortingAlgos/quicksort.js"],"names":["getQuickSortAnimations","array","animations","quicksort","length","start","end","pIndex","randomisedPartition","k","Math","floor","random","push","temp","partition","pivot","i"],"mappings":"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","sourcesContent":["export function getQuickSortAnimations(array){\r\n    const animations = [];\r\n    quicksort(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction quicksort(array, start, end, animations){\r\n    if(start < end){\r\n        const pIndex = randomisedPartition(array, start, end, animations);\r\n        quicksort(array, start, pIndex-1, animations);\r\n        quicksort(array, pIndex+1, end, animations);\r\n    }\r\n}\r\n\r\nfunction randomisedPartition(array, start, end, animations){\r\n    const k = Math.floor(Math.random() * (end-start+1)) + start;\r\n    animations.push([k, array[end]]);\r\n    animations.push([end, array[k]]);\r\n    let temp = array[k];\r\n    array[k] = array[end];\r\n    array[end] = temp;\r\n    return partition(array, start, end, animations);\r\n}\r\n\r\nfunction partition(array, start, end, animations){\r\n    let pivot = array[end];\r\n    let pIndex = start;\r\n    for(let i = start ; i < end ; i++){\r\n        if(array[i] < pivot){\r\n            animations.push([i, array[pIndex]]);\r\n            animations.push([pIndex, array[i]]);\r\n            let temp = array[i];\r\n            array[i] = array[pIndex];\r\n            array[pIndex] = temp;\r\n            pIndex++;\r\n        }\r\n    }\r\n    animations.push([end, array[pIndex]]);\r\n    animations.push([pIndex, array[end]]);\r\n    array[end] = array[pIndex];\r\n    array[pIndex] = pivot;\r\n    return pIndex;\r\n}"]},"metadata":{},"sourceType":"module"}