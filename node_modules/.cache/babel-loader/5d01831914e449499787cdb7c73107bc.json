{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  const auxArray = array.slice();\n  mergesort(array, 0, array.length - 1, auxArray, animations);\n  return animations;\n}\n\nfunction mergesort(array, start, end, auxArray, animations) {\n  if (start == end) return;\n  const mid = Math.floor((start + end) / 2);\n  mergesort(auxArray, start, mid, array, animations);\n  mergesort(auxArray, mid + 1, end, array, animations);\n  merge(array, start, end, auxArray, animations);\n}\n\nfunction merge(array, start, end, auxArray, animations) {\n  const mid = Math.floor((start + end) / 2);\n  let i = start,\n      j = mid + 1,\n      k = start;\n\n  while (i <= mid && j <= end) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (auxArray[i] <= auxArray[j]) {\n      animations.push([k, auxArray[i]]);\n      array[k++] = auxArray[i++];\n    } else {\n      animations.push([k, auxArray[j]]);\n      array[k++] = auxArray[j++];\n    }\n  }\n\n  while (i <= mid) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxArray[i]]);\n    array[k++] = auxArray[i++];\n  }\n\n  while (j <= end) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxArray[j]]);\n    array[k++] = auxArray[j++];\n  }\n}","map":{"version":3,"sources":["C:/Users/yash santhalia/Desktop/React/algo/src/Sorting/components/sortingAlgos/mergesort.js"],"names":["getMergeSortAnimations","array","animations","auxArray","slice","mergesort","length","start","end","mid","Math","floor","merge","i","j","k","push"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array){\r\n  const animations = [];\r\n  const auxArray = array.slice();\r\n  mergesort(array, 0, array.length-1, auxArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergesort(array, start, end, auxArray, animations){\r\n  if(start == end)\r\n    return;\r\n  const mid = Math.floor((start + end)/2);\r\n  mergesort(auxArray, start, mid, array, animations);\r\n  mergesort(auxArray, mid+1, end, array, animations);\r\n  merge(array, start, end, auxArray, animations);\r\n}\r\n\r\nfunction merge(array, start, end, auxArray, animations){\r\n  const mid = Math.floor((start+end)/2);\r\n  let i = start, j = mid+1, k = start;\r\n  while(i <= mid && j <= end){\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if(auxArray[i] <= auxArray[j]){\r\n      animations.push([k, auxArray[i]]);\r\n      array[k++] = auxArray[i++];\r\n    }\r\n    else{  \r\n      animations.push([k, auxArray[j]]);\r\n      array[k++] = auxArray[j++];\r\n    }\r\n  }\r\n  while(i <= mid){\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([k, auxArray[i]]);\r\n    array[k++] = auxArray[i++];\r\n  }\r\n  while(j <= end){\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([k, auxArray[j]]);\r\n    array[k++] = auxArray[j++];\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}