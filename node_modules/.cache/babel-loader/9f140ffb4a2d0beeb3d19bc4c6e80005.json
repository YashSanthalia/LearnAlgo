{"ast":null,"code":"class Cell {\n  constructor(i, j, rows, cols) {\n    this.removeWalls = (current, next) => {\n      let x = current.i - next.i;\n      let y = current.j - next.j;\n\n      if (x < 0) {\n        current.walls[1] = false;\n        next.walls[3] = false;\n      } else if (x > 0) {\n        current.walls[3] = false;\n        next.walls[1] = false;\n      } else if (y > 0) {\n        current.walls[0] = false;\n        next.walls[2] = false;\n      } else if (y < 0) {\n        current.walls[2] = false;\n        next.walls[0] = false;\n      }\n    };\n\n    this.i = i;\n    this.j = j;\n    this.visited = false;\n    this.walls = [true, true, true, true];\n  }\n\n}\n\nexport default Cell;","map":{"version":3,"sources":["C:/Users/yash santhalia/Desktop/React/algo/src/BackTracking/Cell.js"],"names":["Cell","constructor","i","j","rows","cols","removeWalls","current","next","x","y","walls","visited"],"mappings":"AAAA,MAAMA,IAAN,CAAU;AACNC,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,IAAP,EAAaC,IAAb,EAAkB;AAAA,SAO7BC,WAP6B,GAOf,CAACC,OAAD,EAAUC,IAAV,KAAmB;AAC7B,UAAIC,CAAC,GAAGF,OAAO,CAACL,CAAR,GAAYM,IAAI,CAACN,CAAzB;AACA,UAAIQ,CAAC,GAAGH,OAAO,CAACJ,CAAR,GAAYK,IAAI,CAACL,CAAzB;;AACA,UAAIM,CAAC,GAAG,CAAR,EAAW;AACTF,QAAAA,OAAO,CAACI,KAAR,CAAc,CAAd,IAAmB,KAAnB;AACAH,QAAAA,IAAI,CAACG,KAAL,CAAW,CAAX,IAAgB,KAAhB;AACD,OAHD,MAGO,IAAIF,CAAC,GAAG,CAAR,EAAW;AAChBF,QAAAA,OAAO,CAACI,KAAR,CAAc,CAAd,IAAmB,KAAnB;AACAH,QAAAA,IAAI,CAACG,KAAL,CAAW,CAAX,IAAgB,KAAhB;AACD,OAHM,MAGA,IAAID,CAAC,GAAG,CAAR,EAAW;AAChBH,QAAAA,OAAO,CAACI,KAAR,CAAc,CAAd,IAAmB,KAAnB;AACAH,QAAAA,IAAI,CAACG,KAAL,CAAW,CAAX,IAAgB,KAAhB;AACD,OAHM,MAGA,IAAID,CAAC,GAAG,CAAR,EAAW;AAChBH,QAAAA,OAAO,CAACI,KAAR,CAAc,CAAd,IAAmB,KAAnB;AACAH,QAAAA,IAAI,CAACG,KAAL,CAAW,CAAX,IAAgB,KAAhB;AACD;AACJ,KAvB4B;;AACzB,SAAKT,CAAL,GAAOA,CAAP;AACA,SAAKC,CAAL,GAAOA,CAAP;AACA,SAAKS,OAAL,GAAe,KAAf;AACA,SAAKD,KAAL,GAAa,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAb;AACH;;AANK;;AA2BV,eAAeX,IAAf","sourcesContent":["class Cell{\r\n    constructor(i, j, rows, cols){\r\n        this.i=i;\r\n        this.j=j;\r\n        this.visited = false;\r\n        this.walls = [true, true, true, true];\r\n    }\r\n    \r\n    removeWalls = (current, next) => {\r\n        let x = current.i - next.i;\r\n        let y = current.j - next.j;\r\n        if (x < 0) {\r\n          current.walls[1] = false;\r\n          next.walls[3] = false;\r\n        } else if (x > 0) {\r\n          current.walls[3] = false;\r\n          next.walls[1] = false;\r\n        } else if (y > 0) {\r\n          current.walls[0] = false;\r\n          next.walls[2] = false;\r\n        } else if (y < 0) {\r\n          current.walls[2] = false;\r\n          next.walls[0] = false;\r\n        }\r\n    };\r\n}\r\n\r\nexport default Cell;"]},"metadata":{},"sourceType":"module"}